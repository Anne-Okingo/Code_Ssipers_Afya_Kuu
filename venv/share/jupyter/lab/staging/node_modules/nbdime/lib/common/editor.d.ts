import type { EditorView } from '@codemirror/view';
import type { Text } from '@codemirror/state';
import { CodeEditorWrapper, CodeEditor } from '@jupyterlab/codeeditor';
import { CodeMirrorEditor, IEditorFactoryOptions } from '@jupyterlab/codemirror';
export interface IEditorWidgetOptions extends Omit<CodeEditor.IOptions, 'host' | 'model' | 'inline'> {
    /**
     * Editor factory
     *
     * #### Notes
     * The widget needs a factory and a the editor options
     * because it needs to provide its own node as the host.
     */
    factory?: CodeEditor.Factory;
    /**
     * The starting value of the editor.
     */
    value?: string;
    /**
     * Editor configuration
     */
    config?: {
        /**
         * Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).
         */
        lineWrap?: boolean;
        /**
         * Whether to show line numbers to the left of the editor.
         */
        lineNumbers?: boolean;
        /**
         * This disables editing of the editor content by the user.
         * If the special value "nocursor" is given (instead of simply true), focusing of the editor is also disallowed.
         */
        readOnly?: boolean | string;
    };
}
export declare class EditorWidget extends CodeEditorWrapper {
    /**
     * Store all editor instances for operations that
     * need to loop over all instances.
     */
    constructor(options: IEditorWidgetOptions);
    get cm(): EditorView;
    get doc(): Text;
    readonly editor: CodeMirrorEditor;
    staticLoaded: boolean;
}
export declare function createEditorFactory(options?: IEditorFactoryOptions): CodeEditor.Factory;
//# sourceMappingURL=editor.d.ts.map