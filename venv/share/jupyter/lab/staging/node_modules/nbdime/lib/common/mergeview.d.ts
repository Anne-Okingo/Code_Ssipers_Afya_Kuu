import { StateField } from '@codemirror/state';
import { Decoration, DecorationSet } from '@codemirror/view';
import type { CodeEditor } from '@jupyterlab/codeeditor';
import { type ITranslator } from '@jupyterlab/translation';
import { Panel } from '@lumino/widgets';
import type { IStringDiffModel } from '../diff/model';
import { Chunk } from '../chunking';
import { EditorWidget, IEditorWidgetOptions } from './editor';
import type { IMergeViewOptions } from './interfaces';
export declare enum DIFF_OP {
    DIFF_DELETE = -1,
    DIFF_INSERT = 1,
    DIFF_EQUAL = 0
}
export declare enum EventDirection {
    INCOMING = 0,
    OUTGOING = 1
}
export type EditorDecorationsDict = {
    [key: string]: Decoration;
    chunk: Decoration;
    start: Decoration;
    end: Decoration;
    conflict: Decoration;
    endEmpty: Decoration;
    inserted: Decoration;
    deleted: Decoration;
};
export type MergeViewDecorationDict = {
    [key: string]: EditorDecorationsDict;
    left: EditorDecorationsDict;
    right: EditorDecorationsDict;
    localMerge: EditorDecorationsDict;
    remoteMerge: EditorDecorationsDict;
    customMerge: EditorDecorationsDict;
    eitherMerge: EditorDecorationsDict;
    mixedMerge: EditorDecorationsDict;
};
/**
 * StateField storing information about padding widgets used to keep the alignment between different editors
 */
export declare const replacePaddingWidgetEffect: import("@codemirror/state").StateEffectType<DecorationSet>;
/**
 * StateField storing information about padding widgets used to keep the alignment between different editors
 */
export declare const paddingWidgetField: StateField<DecorationSet>;
/**
 * Merge view factory options
 */
export interface IMergeViewFactoryOptions extends Partial<IMergeViewOptions> {
    /**
     * Diff between the reference and a remote version
     */
    remote: IStringDiffModel | null;
    /**
     * Diff between the reference and a local version
     */
    local?: IStringDiffModel | null;
    /**
     * Diff between the reference and the merged version
     */
    merged?: IStringDiffModel;
    readOnly?: boolean | string;
    /**
     * Text editor factory
     */
    factory?: CodeEditor.Factory;
}
/**
 * A wrapper view for showing StringDiffModels in a MergeView
 */
export declare function createNbdimeMergeView(options: IMergeViewFactoryOptions): MergeView;
/**
 * DiffView options
 */
export interface IDiffViewOptions {
    /**
     * Diff model
     */
    model: IStringDiffModel;
    /**
     * Remote content type
     */
    type: 'left' | 'right' | 'merge';
    /**
     * Editor configuration
     */
    options: Omit<IEditorWidgetOptions, 'value'>;
    /**
     * Whether to synchronize scrolling between the two editors or not.
     */
    lockScroll?: boolean;
    /**
     * The configuration options for the editor.
     */
    translator?: ITranslator;
}
/**
 * Used by MergeView to show diff in a string diff model
 */
export declare class DiffView {
    constructor({ model, type, options, lockScroll, translator, }: IDiffViewOptions);
    init(baseWidget: EditorWidget): void;
    /**
     * Update the highlighting in the views of baseEditor and remoteEditor
     */
    updateView(): void;
    /**
     * Update the chunks once a version has been picked
     */
    syncModel(): void;
    /**
     * Add a gap DOM element between 2 editors
     */
    buildGap(): HTMLElement;
    /**
     * Whether to lock scroll or not.
     *
     * @param val Scroll lock value
     */
    setScrollLock(val: boolean): void;
    private modelInvalid;
    /**
     * Synchronize the scrolling between editors.
     * srcEditor refers to the source editor from which the scrolling is done and listened
     * destEditor is the destination editor whose scrolling is synchronized with the one of srcEditor.
     */
    private syncScroll;
    /**
     * The decorationKey is used to have access to the correct css class associated to a given decoration type
     */
    private getDecorationKey;
    private getConflictState;
    /**
     * Create effects related to gutter markers
     */
    private createGutterEffects;
    /**
     * Build line background effects and gutter markers effects
     */
    private buildLineEffects;
    /**
     * Remove line background effects and gutter markers effects
     */
    private clearLineEffects;
    /**
     * Build character highlighting effects
     */
    private buildCharacterHighlighting;
    /**
    Clear character highlighting effects
    */
    private clearCharacterHighlighting;
    /**
    Build line effects (highlight and gutters) and character highlighting effects and dispatch them
     */
    private updateHighlighting;
    /**
    Clear line effects (highlight and gutters) and character highlighting effects and dispatch them
     */
    private clearHighlighting;
    get remoteEditorWidget(): EditorWidget;
    get baseEditorWidget(): EditorWidget;
    get chunks(): Chunk[];
    get lineChunks(): Chunk[];
    get model(): IStringDiffModel;
    private _baseEditorWidget;
    private _remoteEditorWidget;
    private _model;
    private _trans;
    private _type;
    private _chunks;
    private _lineChunks;
    private _gap;
    private _lockScroll;
    private _lockButton;
}
export interface IMergeViewEditorConfiguration extends Omit<IEditorWidgetOptions, 'value'> {
    /**
     * When true stretches of unchanged text will be collapsed. When a number is given, this indicates the amount
     * of lines to leave visible around such stretches (which defaults to 2). Defaults to true.
     */
    collapseIdentical?: boolean | number;
    /**
     * Provides remote diff of document to be shown on the right of the base.
     * To create a diff view, provide only remote.
     */
    remote: IStringDiffModel | null;
    /**
     * Provides local diff of the document to be shown on the left of the base.
     * To create a diff view, omit local.
     */
    local?: IStringDiffModel | null;
    /**
     * Provides the partial merge input for a three-way merge.
     */
    merged?: IStringDiffModel;
    /**
     * When true, the base of a three-way merge is shown. Defaults to true.
     */
    showBase?: boolean;
    /**
     * When true, changed pieces of text are highlighted. Defaults to true.
     */
    showDifferences?: boolean;
}
export declare class MergeView extends Panel {
    constructor(options: IMergeViewEditorConfiguration);
    /**
     * Align the matching lines of the different editors
     */
    alignViews(): void;
    /**
     * Used to schedule the call of alignViews
     */
    scheduleAlignViews(): void;
    getMergedValue(): string;
    protected collapseIdenticalStretches(): void;
    /**
     * Actions and updates performed when a gutter marker is clicked
     */
    private onGutterClick;
    /**
     * Update of the models of the diffViews by calling syncModel that updates the chunks
     */
    private updateDiffModels;
    /**
     * Update of the views of the diffViews by calling updateView
     * Before updating the diffViews, baseEditor needs to be cleared from its pickers
     */
    private updateDiffViews;
    /**
     * Clear the pickers of the baseEditor
     * The baseEditor is indeed cumulating pickers from different diffViews
     * Since this editor is common to the 3 diffviews
     */
    private clearBaseEditorPickers;
    get left(): DiffView | null;
    get right(): DiffView | null;
    get merge(): DiffView | null;
    get base(): EditorWidget;
    private get _diffViews();
    private _trans;
    private _collapseIdentical;
    private _left;
    private _right;
    private _merge;
    private _base;
    private _aligning;
    private _measuring;
    private _showBase;
}
//# sourceMappingURL=mergeview.d.ts.map