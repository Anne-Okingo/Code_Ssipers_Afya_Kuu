import { PathExt, URLExt } from '@jupyterlab/coreutils';
import { ServerConnection } from '@jupyterlab/services';
import { nullTranslator } from '@jupyterlab/translation';
import { NbdimeWidget } from './widget';
import { urlRStrip } from './utils';
export function diffNotebook(args) {
    let { base, remote, translator } = args;
    const trans = (translator ?? nullTranslator).load('nbdime');
    let widget = new NbdimeWidget(args);
    widget.title.label = trans.__('Diff: %1 â†” %2', base, remote);
    widget.title.caption = trans.__("Local: '%1'\nRemote: '%2'", base, remote);
    return widget;
}
export function diffNotebookCheckpoint(args) {
    const { path, rendermime, hideUnchanged, editorFactory, translator } = args;
    const trans = (translator ?? nullTranslator).load('nbdime');
    let nb_dir = PathExt.dirname(path);
    let name = PathExt.basename(path, '.ipynb');
    let base = PathExt.join(nb_dir, name + '.ipynb');
    let widget = new NbdimeWidget({
        base,
        editorFactory,
        rendermime,
        baseLabel: trans.__('Checkpoint'),
        hideUnchanged,
        translator,
    });
    widget.title.label = trans.__('Diff checkpoint: %1', name);
    widget.title.caption = trans.__("Local: latest checkpoint\nRemote: '%1'", path);
    widget.title.iconClass = 'fa fa-clock-o jp-fa-tabIcon';
    return widget;
}
export function diffNotebookGit(args) {
    const { path, rendermime, hideUnchanged, editorFactory, translator } = args;
    const trans = (translator ?? nullTranslator).load('nbdime');
    let name = PathExt.basename(path, '.ipynb');
    let widget = new NbdimeWidget({
        base: path,
        editorFactory,
        rendermime,
        hideUnchanged,
        translator,
    });
    widget.title.label = trans.__('Diff git: %1', name);
    widget.title.caption = trans.__("Local: git HEAD\nRemote: '%1'", path);
    widget.title.iconClass = 'fa fa-git jp-fa-tabIcon';
    return widget;
}
export function isNbInGit(args) {
    let request = {
        method: 'POST',
        body: JSON.stringify(args),
    };
    let settings = ServerConnection.makeSettings();
    return ServerConnection.makeRequest(URLExt.join(urlRStrip(settings.baseUrl), '/nbdime/api/isgit'), request, settings)
        .then(response => {
        if (!response.ok) {
            return Promise.reject(response);
        }
        return response.json();
    })
        .then(data => {
        return data['is_git'];
    });
}
//# sourceMappingURL=actions.js.map